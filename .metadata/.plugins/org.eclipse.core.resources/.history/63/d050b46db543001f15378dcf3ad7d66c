package com.creditoservice;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.clientecreditoexpress.dto.ClienteRegisterDTO;
import com.clientecreditoexpress.dto.ClienteResponseDTO;
import com.clientecreditoexpress.exception.ApiResponse;
import com.clientecreditoexpress.service.ClienteService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/cliente")
public class ClienteController {

	private final ClienteService clienteService;
	
	public ClienteController(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	@Autowired
    private RestTemplate restTemplate;
	
    private final String SERVICE_URL = "http://credito-express-service:8081";

	
    @GetMapping("/taxa/{id}")
    public ResponseEntity<String> getTaxa(@PathVariable String id) {
        String response = clienteService.getTaxa(id);
        return ResponseEntity.ok(response);
    }
	@GetMapping("/buscar/{id}")
	public ResponseEntity<ApiResponse<ClienteResponseDTO>> buscar(@PathVariable @Valid String id) {
		ClienteResponseDTO fornecedor = clienteService.buscarCliente(id);
		return ResponseEntity.ok()
				.body(new ApiResponse<>(HttpStatus.OK.value(), "Busca realizada com sucesso!", fornecedor));
	}
	
	@GetMapping("/listar")
	public ResponseEntity<ApiResponse<Page<ClienteResponseDTO>>> listar(@PageableDefault(size = 10, sort = { "nome" }) Pageable paginacao) {
		Page<ClienteResponseDTO> clientesPage = clienteService.listarClientes(paginacao);
		ApiResponse<Page<ClienteResponseDTO>> response = new ApiResponse<>(HttpStatus.OK.value(),
				"Listagem conclu√≠da com sucesso!", clientesPage);
		return ResponseEntity.ok(response);
	}

	@PostMapping("/cadastrar")
	public ResponseEntity<ApiResponse<ClienteRegisterDTO>> cadastrar(@RequestBody @Valid ClienteRegisterDTO novoCliente) {
		clienteService.cadastrar(novoCliente);
		return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK.value(), "Cliente Cadastrado com sucesso!", novoCliente));
	}
	
	
	@PutMapping("/atualizar/{id}")
	public ResponseEntity<ApiResponse<ClienteRegisterDTO>> alterarDados(@PathVariable @Valid String id, @RequestBody @Valid ClienteRegisterDTO clienteAtualizado){
		clienteService.alterarDados(id, clienteAtualizado);
		return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK.value(),"Dados alterado com sucesso!", clienteAtualizado));
		
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<ApiResponse<?>> deletar(@PathVariable @Valid String id) {
		clienteService.deletar(id);
		return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK.value(),"Cliente deletado com sucesso!"));
	}


}
