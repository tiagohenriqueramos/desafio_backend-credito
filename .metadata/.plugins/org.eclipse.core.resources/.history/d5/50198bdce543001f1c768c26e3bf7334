package com.creditoservice.service;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.creditocliente.domain.Cliente;
import com.creditocliente.dto.ClienteResponseDTO;
import com.creditoservice.domain.Taxa;
import com.creditoservice.dto.ClienteApiResponseDTO;
import com.creditoservice.dto.TaxaRegisterDTO;
import com.creditoservice.dto.TaxaResponseDTO;
import com.creditoservice.exception.NotFoundException;
import com.creditoservice.repository.TaxaRepository;

import jakarta.validation.Valid;

@Service
public class TaxaService {

	private final TaxaRepository taxaRepository;

	public TaxaService(TaxaRepository taxaRepository) {
		this.taxaRepository = taxaRepository;
	}

	public TaxaResponseDTO buscarTaxa(@Valid String id) {
		Taxa taxa = taxaRepository.findById(id).orElseThrow(() -> new NotFoundException("Taxa não encontrado"));

		return new TaxaResponseDTO(taxa);
	}

	public void cadastrar(@Valid TaxaRegisterDTO novaTaxa) {
		if (taxaRepository.findByTipo(novaTaxa.tipo()).isPresent()) {
			throw new NotFoundException("Taxa já cadastrada!");
		}
		Taxa taxa = new Taxa(novaTaxa);
		taxaRepository.save(taxa);
	}

	public void alterarDados(@Valid String id, @Valid TaxaRegisterDTO dadosAtualizado) {
		Taxa taxa = taxaRepository.findById(id).orElseThrow(() -> new NotFoundException("Taxa não encontrado"));
						
		if(dadosAtualizado.tipo() != null && !Objects.equals(taxa.getTipo(), dadosAtualizado.tipo())) {
			taxa.setTipo(dadosAtualizado.tipo());
		}
		
		if(dadosAtualizado.taxas() != null && !Objects.equals(taxa.getTaxas(), dadosAtualizado.taxas())) {
			taxa.setTaxas(dadosAtualizado.taxas());
		}
		
		taxaRepository.save(taxa);
	}
	
	public void deletar(@Valid String id) {
		Taxa taxa = taxaRepository.findById(id).orElseThrow(() -> new NotFoundException("Taxa não encontrado"));
		taxa.setDeleted(true);
		taxaRepository.save(taxa);
	}
	
	public double calcularTaxa(ClienteApiResponseDTO cliente, int numeroParcelas) {
        String tipo = determinarTipoTaxa(cliente);
        Optional<Taxa> taxaOptional = taxaRepository.findByTipo(tipo);
        
        if (taxaOptional.isPresent()) {
            Taxa taxa = taxaOptional.get();
            return taxa.getTaxas().getOrDefault(String.valueOf(numeroParcelas), 0.0);
        } else {
            throw new RuntimeException("Tipo de taxa não encontrado: " + tipo);
        }
    }

    private String determinarTipoTaxa(ClienteApiResponseDTO cliente) {
        if (cliente.isNegativado()) {
            return "NEGATIVADO";
        } else if (cliente.getScore() > 500) {
            return "SCORE_ALTO";
        } else {
            return "SCORE_BAIXO";
        }
    }

	public Page<TaxaResponseDTO> listarClientes(Pageable paginacao) {
		Page<Taxa> taxaPage = taxaRepository.findAll(paginacao);

		List<TaxaResponseDTO> listaClientesDTO = taxaPage.getContent().stream().map(TaxaResponseDTO::new)
				.collect(Collectors.toList());

		return new PageImpl<>(listaClientesDTO, paginacao, taxaPage.getTotalElements());
	}
}