package com.creditoservice.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.creditoservice.dto.SimulacaoRequestDTO;
import com.creditoservice.dto.SimulacaoResponseDTO;
import com.creditoservice.dto.TaxaRegisterDTO;
import com.creditoservice.dto.TaxaResponseDTO;
import com.creditoservice.exception.ApiResponse;
import com.creditoservice.service.SimulacaoService;
import com.creditoservice.service.TaxaService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class TaxaController {

	private final TaxaService taxaService;

	@Autowired
	private SimulacaoService simulacaoService;

	public TaxaController(TaxaService taxaService) {
		this.taxaService = taxaService;
	}

	@GetMapping("/listar")
	public ResponseEntity<ApiResponse<Page<TaxaResponseDTO>>> listar(
			@PageableDefault(size = 10, sort = { "nome" }) Pageable paginacao) {
		Page<TaxaResponseDTO> taxasPage = taxaService.listarClientes(paginacao);
		ApiResponse<Page<TaxaResponseDTO>> response = new ApiResponse<>(HttpStatus.OK.value(),
				"Listagem conclu√≠da com sucesso!", taxasPage);
		return ResponseEntity.ok(response);
	}

	@GetMapping("/buscar/{id}")
	public ResponseEntity<ApiResponse<TaxaResponseDTO>> buscar(@PathVariable @Valid String id) {
		TaxaResponseDTO fornecedor = taxaService.buscarTaxa(id);
		return ResponseEntity.ok()
				.body(new ApiResponse<>(HttpStatus.OK.value(), "Busca realizada com sucesso!", fornecedor));
	}

	@PostMapping("/cadastrar")
	public ResponseEntity<ApiResponse<TaxaRegisterDTO>> cadastrar(@RequestBody @Valid TaxaRegisterDTO novaTaxa) {
		taxaService.cadastrar(novaTaxa);
		return ResponseEntity.ok()
				.body(new ApiResponse<>(HttpStatus.OK.value(), "Taxa cadastrada com sucesso!", novaTaxa));
	}

	@PutMapping("/atualizar/{id}")
	public ResponseEntity<ApiResponse<TaxaRegisterDTO>> alterarDados(@PathVariable @Valid String id,
			@RequestBody @Valid TaxaRegisterDTO taxaAtualizado) {
		taxaService.alterarDados(id, taxaAtualizado);
		return ResponseEntity.ok()
				.body(new ApiResponse<>(HttpStatus.OK.value(), "Dados alterados com sucesso!", taxaAtualizado));
	}

	@PostMapping("/simulacao/{cpf}")
	public ResponseEntity<SimulacaoResponseDTO> simularEmprestimo(@PathVariable String cpf,
			@RequestBody SimulacaoRequestDTO request) {
		try {
			SimulacaoResponseDTO response = simulacaoService.simularEmprestimo(cpf, request);
			return ResponseEntity.ok(response);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.badRequest().body(null);
		} catch (RuntimeException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<ApiResponse<?>> deletar(@PathVariable @Valid String id) {
		taxaService.deletar(id);
		return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK.value(), "Taxa deletada com sucesso!"));
	}
}
